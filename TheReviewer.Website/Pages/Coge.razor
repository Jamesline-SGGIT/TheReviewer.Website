@page "/Coge"
@using TheReviewer.Website.Components

@using static CommonServices.ExcelConversionService
@using static CommonServices.ExcelConversionService.TablesModel;

@inject Services.Common.AppDataService AppDataService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>Coge Reader</h3>
<p><FileReader FileType="Coge" /></p>


@if (AppDataService.FileLoaded == true)
{
    <button class="btn btn-primary" @onclick="DecodeFile">Decode</button>
    <hr />

    @if (fileDecoded)
    {
        <DisplayTable tableDisplay=tableModel />
        <button class="btn btn-primary" @onclick="SaveFile">Save File</button>
        @LoadStatus
        <hr />
    }

}
@code {
    TableModel tableModel = new TableModel();
    string MasterStatus = "";
    string LoadStatus = "";
    bool fileDecoded;

    protected override void OnInitialized()
    {
        AppDataService.OnChange += StateHasChanged;
        AppDataService.FileLoaded = false;
        AppDataService.MasterStatus = "";
        fileDecoded = false;
    }
    async Task DecodeFile()
    {
        AppDataService.GecoMem = AppDataService.FileMem;
        tableModel = Services.CogeBuilderService.CogeFetcher(AppDataService.FileMem);
        if (tableModel == null)
        {

        }
        else
        {
            fileDecoded = true;
             AppDataService.CogeTable = tableModel;
        }
    }
    async Task SaveFile()
        {
            if (AppDataService.CogeTable != null)
            {
                var cogeTable = AppDataService.CogeTable;
                cogeTable.Name = "Coge";
                if (Services.CogeBuilderService.SaveCogeExcelFile(cogeTable))
                {
                    LoadStatus = "File Saved";
                }

            }
        }

}

